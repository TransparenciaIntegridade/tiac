<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PostBrinde extends \Application\Entity\PostBrinde implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getIdBrinde()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["idBrinde"];
        }
        $this->__load();
        return parent::getIdBrinde();
    }

    public function setNome($nome)
    {
        $this->__load();
        return parent::setNome($nome);
    }

    public function getNome()
    {
        $this->__load();
        return parent::getNome();
    }

    public function setDescricao($descricao)
    {
        $this->__load();
        return parent::setDescricao($descricao);
    }

    public function getDescricao()
    {
        $this->__load();
        return parent::getDescricao();
    }

    public function setData($data)
    {
        $this->__load();
        return parent::setData($data);
    }

    public function getData()
    {
        $this->__load();
        return parent::getData();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setCorX($corX)
    {
        $this->__load();
        return parent::setCorX($corX);
    }

    public function getCorX()
    {
        $this->__load();
        return parent::getCorX();
    }

    public function setCorY($corY)
    {
        $this->__load();
        return parent::setCorY($corY);
    }

    public function getCorY()
    {
        $this->__load();
        return parent::getCorY();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setIdLista(\Application\Entity\Lista $idLista = NULL)
    {
        $this->__load();
        return parent::setIdLista($idLista);
    }

    public function getIdLista()
    {
        $this->__load();
        return parent::getIdLista();
    }

    public function setIdUser(\Application\Entity\User $idUser)
    {
        $this->__load();
        return parent::setIdUser($idUser);
    }

    public function getIdUser()
    {
        $this->__load();
        return parent::getIdUser();
    }

    public function getArrayCopy()
    {
        $this->__load();
        return parent::getArrayCopy();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'idBrinde', 'nome', 'descricao', 'data', 'image', 'corX', 'corY', 'active', 'idLista', 'idUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}